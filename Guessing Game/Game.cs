using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Guessing_Game
{
    class Game
    {
        public ConsoleColor currentTextColor = Console.ForegroundColor;
        public ConsoleColor currentBackColor = Console.BackgroundColor;

        public UInt32 guessCount = 0;
        private string guess = string.Empty;
        private RangedRandomNumber secretNumberGenerator = new RangedRandomNumber();

        private const UInt16 minimumValue = 0;
        private const UInt16 maximumValue = 3;
        
        private UInt16 GameSetup(UInt16 rangeOption) // funtion to set initial parameters of the gameplay
        {
            secretNumberGenerator.SetMinimum(1); // sets the minimum value to be considered to guess
            guessCount = 0;

            switch (rangeOption)
            {
                case 0:
                    return 0;
                case 1:
                    secretNumberGenerator.SetMaximum(20); // sets the maximum value depending on the option selected before
                    break;
                case 2:
                    secretNumberGenerator.SetMaximum(100);
                    break;
                case 3:
                    secretNumberGenerator.SetMaximum(1000);
                    break;
            }

            UInt16 number = Convert.ToUInt16(secretNumberGenerator.GenerateRandomNumber()); // generates a random number based on the minimum and maximum values informed
            return number;
        }

        public Game() // default constructor
        {

        }

        public UInt16 DisplayMenu() // function to display the game menu with possible options
        {
            UInt16 chosenOptionNumber = 100;
            bool validInput = false;
            do
            {
                Console.ForegroundColor = ConsoleColor.DarkBlue;
                Console.BackgroundColor = ConsoleColor.White;
                Console.Clear();

                Console.WriteLine();
                Console.WriteLine("\tGuess a number...");
                Console.WriteLine("\t1: Easy: between 1 and 20");
                Console.WriteLine("\t2: Normal: between 1 and 100");
                Console.WriteLine("\t3: Hard: between 1 and 1000");
                Console.WriteLine();
                Console.WriteLine("\t0: Exit");
                Console.WriteLine();
                Console.Write("\tEnter your option: ");
                string input = Console.ReadLine();

                try
                {
                    chosenOptionNumber = UInt16.Parse(input); // try if the option selected is a valid number. If not, shows a Warning Message
                    validInput = (chosenOptionNumber >= minimumValue && chosenOptionNumber <= maximumValue);
                    if (!validInput)
                    {
                        ConsoleColor currentTextColorErr = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Red;
                        PrintMsg("WARNING - The option must be a number in-between 0 and 3...");
                        Console.ForegroundColor = currentTextColorErr;
                        Console.ReadKey();
                    }
                }
                catch (Exception e)
                {
                    ConsoleColor currentTextColorErr = Console.ForegroundColor;
                    Console.ForegroundColor = ConsoleColor.Red;
                    if (e is FormatException)
                    {
                        PrintMsg("WARNING - Invalid Input: " + e.Message);
                    }
                    else if (e is OverflowException)
                    {
                        PrintMsg("WARNING - Number Error: " + e.Message);
                    }
                    else
                    {
                        PrintMsg("WARNING - Error: " + e.Message);
                    }
                    Console.ForegroundColor = currentTextColorErr;
                    Console.ReadKey();
                }
            } while (!validInput);
            return GameSetup(chosenOptionNumber); // returns the funtion with the option selected
        }

        public void PlayGame(UInt32 secretNumber) // funtion that controls the game play with the secret number generated by the random function
        {

            UInt16 chosenGuessingNumber = 0; // sets the number inputted by user to 0 (non-valid) and also gets max and min values allowed to play
            int minValue = secretNumberGenerator.GetMinimum();
            int maxValue = secretNumberGenerator.GetMaximum();
            bool validGuess = false;

            do
            {
                try
                {
                    Console.Clear();

                    Console.WriteLine();
                    Console.Write("\tGuess the secret number: ");

                    guess = Console.ReadLine();
                    chosenGuessingNumber = UInt16.Parse(guess);
                    validGuess = (chosenGuessingNumber >= minValue && chosenGuessingNumber <= maxValue);
                    if (validGuess)
                    {
                        guessCount++; // increases the # of attempts to try to guess the number
                        if (chosenGuessingNumber > secretNumber)
                        {
                            
                            PrintMsg("Sorry, try a lower number!");
                            Console.ReadKey(); // waits for a user input of 1 keypressed
                        }
                        else if (chosenGuessingNumber < secretNumber)
                        {
                            PrintMsg("Sorry, try a higher number!");
                            Console.ReadKey();
                        }
                    }
                    else
                    {
                        PrintMsg("WARNING - The number must be in-between " + minValue + " and " + maxValue);
                        Console.ReadKey();
                    }
                }
                catch (Exception e)
                {
                    ConsoleColor currentTextColorErr = Console.ForegroundColor;
                    Console.ForegroundColor = ConsoleColor.Red;
                    if (e is FormatException)
                    {
                        PrintMsg("WARNING - Invalid Input: " + e.Message);
                    }
                    else if (e is OverflowException)
                    {
                        PrintMsg("WARNING - Number Error: " + e.Message);
                    }
                    else
                    {
                        PrintMsg("WARNING - Error: " + e.Message);
                    }
                    Console.ForegroundColor = currentTextColorErr;
                }

            } while (chosenGuessingNumber != secretNumber);
        }

        private void PrintMsg(string msg) // funtion to optimize the messages displayed
        {
            Console.WriteLine();
            Console.WriteLine("\t" + msg);
        }
    }
}
